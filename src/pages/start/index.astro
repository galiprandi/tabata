---
import Layout from '../../layouts/layout.astro'
import TimerIcon from '../../components/TimerIcon.astro'
import Working from '../../components/Working.astro'
---

<Layout>
  <div id="subtitle"></div>

  <div id="title">Preparation Time</div>

  <div>
    <progress id="progress" value="100" max="100"></progress>
  </div>
  <div id="info">
    <div>
      <TimerIcon />
      <span id="time-left">-</span>
    </div>
    <div>
      <Working />
      <span id="exercise-left">-</span>
    </div>
  </div>

  <a href="/tabata" class="secondary">Abort Session</a>
</Layout>

<script>
  import {
    play,
    getSettings,
    switchBodyClass,
    delaySeconds,
    textToSpeech,
    updateTextContent,
  } from '../../assets/main'

  let { workDuration, restDuration, workouts, prepDuration } = getSettings()

  // Initialize app
  document.addEventListener('DOMContentLoaded', () => {
    let remainingWorkouts = workouts.length
    const totalRoutineTime =
      remainingWorkouts * (workDuration / 60 + restDuration / 60)

    updateExerciseLeft(workouts.length)
    updateRoutineTimeLeft(totalRoutineTime)
    startWorkout()
  })

  const startWorkout = async () => {
    let currentExercise = 0
    let remainingWorkouts = workouts.length
    const totalRoutineTime =
      remainingWorkouts * (workDuration / 60 + restDuration / 60)

    // Show preparation time
    textToSpeech(workouts[0])
    renderContent(workouts[0], 'Preparation Time')
    for (let i = prepDuration; i > 0; i--) {
      await renderTime(i, prepDuration)
      await delaySeconds(1)
    }

    // Loop through workouts
    for (const workout of workouts) {
      switchBodyClass(`workout`)
      renderContent(workout, 'Work Time')

      // Work time
      for (let timeLeft = workDuration; timeLeft > 0; timeLeft--) {
        await renderTime(timeLeft, workDuration)
        await delaySeconds(1)
      }

      // Update current exercise
      currentExercise = currentExercise + 1
      remainingWorkouts--

      updateRoutineTimeLeft(calculateTimeLeft(remainingWorkouts))
      updateExerciseLeft(remainingWorkouts)

      // Show rest time
      if (currentExercise < workouts.length) {
        const nextWorkout = workouts[currentExercise]
        switchBodyClass('rest')
        renderContent(nextWorkout, 'Rest Time')
        textToSpeech(nextWorkout)

        for (let j = restDuration; j > 0; j--) {
          await renderTime(j, restDuration)
          await delaySeconds(1)
        }
      } else {
        // End of workout
        location.href = '/tabata/end'
      }
    }
  }

  // Render title and subtitle
  const renderContent = (title: string, subtitle: string) => {
    updateTextContent('#subtitle', subtitle)
    updateTextContent('#title', title)
  }

  // Render time
  const renderTime = async (time: number, totalTime: number) => {
    console.log(time, totalTime)
    const progressEl = progressElement()
    if (progressEl) progressEl.value = (time / totalTime) * 100
    if (time <= 3) await play('beep')
  }

  // Update exercise left
  const updateExerciseLeft = (exercise: number) =>
    updateTextContent('#exercise-left', exercise.toString())

  // Update routine time left
  const updateRoutineTimeLeft = (time: number) =>
    updateTextContent('#time-left', `${time.toFixed(1).toString()}'`)

  // Calculate time left
  const calculateTimeLeft = (remainingWorkouts: number) =>
    remainingWorkouts * (workDuration / 60 + restDuration / 60)

  // Get progress element
  function progressElement() {
    return document.getElementById('progress') as HTMLProgressElement | null
  }
</script>

<style>
  #subtitle {
    font-size: 3vw;
  }

  #title {
    font-size: 7.5vw;
    font-weight: bold;
    line-height: 1;
  }

  #info {
    font-size: 2.2em;
    display: flex;
    justify-content: space-evenly;
    gap: 3em;

    & div {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.3em;
    }
  }

  /* Screens less than 300px */
  @media (width <= 450px) {
    #subtitle {
      font-size: 1.5em;
    }

    #title {
      font-size: 3em;
    }
  }
</style>
