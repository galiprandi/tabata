---
import Layout from '@app/layouts/layout.astro'
import TimerIcon from '@components/TimerIcon.astro'
import Working from '@components/Working.astro'
import RoundsIcon from '@components/RoundsIcon.astro'
import Play from '@icons/Play.icon.astro'
import Continue from '@components/icons/Continue.icon.astro'
import Pause from '@icons/Pause.icon.astro'
import GoToSettings from '@components/GoToSettings.astro'
---

<Layout>
  <div id="title" data-i18n="Preparation Time" class="speech">
    Preparation Time
  </div>

  <div>
    <progress id="progress" value="100" max="100"></progress>
  </div>

  <div id="info">
    <div>
      <TimerIcon />
      <span id="time-left">-</span>
    </div>

    <button id="btn-routine-pause" class="icon"><Pause /></button>

    <div>
      <Working />
      <span id="exercise-left">-</span>
    </div>
  </div>
</Layout>

<dialog id="go-modal" open>
  <article>
    <h2 data-i18n="Routine">Routine</h2>

    <section id="info">
      <div>
        <RoundsIcon />
        <span class="total-routine-exercises"></span>
      </div>

      <div>
        <TimerIcon />
        <span class="total-routine-time"></span>
      </div>
    </section>

    <div class="buttons">
      <GoToSettings />
      <button id="btn-routine-start" class="secondary" title="Restart">
        <Play />
        <span data-i18n="Restart">Restart</span>
      </button>
      <button id="btn-routine-continue" title="Continue"
        ><Continue /><span data-i18n="Continue">Continue</span>
      </button>
    </div>
  </article>
</dialog>

<script>
  import { play } from '@assets/audio'
  import { t } from '@assets/dictionary'
  import { switchBodyClass, formatDuration, onClick } from '@assets/domHelpers'
  import {
    getSettings,
    delaySeconds,
    textToSpeech,
    updateTextContent,
    gaEvent,
    updateSettings,
  } from '@assets/main'

  // Wait for the DOM to be ready
  document.addEventListener('DOMContentLoaded', () => {
    const { rounds } = getSettings()
    updateScreen(rounds)

    onClick('#btn-routine-pause', () => {
      play('tap', true)
      window.location.reload()
    })

    const playRoutine = () => {
      const modal = document.querySelector(
        '#go-modal'
      ) as HTMLDialogElement | null

      modal?.close()
      play('tap', true)
      startRoutine()
      document.querySelector('#ios-go-modal')?.remove()
    }

    onClick('#btn-routine-start', () => {
      updateSettings({ ...getSettings(), nextExercise: 0 })
      playRoutine()
    })

    onClick('#btn-routine-continue', playRoutine)
  })

  const updateScreen = (exerciseLeft: number) => {
    const { rounds, workouts, nextExercise, workDuration, restDuration } =
      getSettings()
    const exercise = workouts[nextExercise]
    const secondsByExercise = workDuration + restDuration
    const timeLeft = secondsByExercise * exerciseLeft
    updateTextContent('.t-next-exercise', exercise)
    updateTextContent('.total-routine-exercises', rounds.toString())
    updateTextContent('#exercise-left', exerciseLeft.toString())
    updateTextContent('#time-left', formatDuration(timeLeft))
    updateTextContent('.total-routine-time', formatDuration(timeLeft))
    updateTextContent('#title', exercise)
    updateTextContent('#go-modal h3', t('Routine'))
    updateTextContent('#go-settings', t('Settings'))
  }

  const startRoutine = async () => {
    gaEvent('Start Workout')
    const { rounds } = getSettings()

    // Preparation time
    await prepTime()

    // Loop through rounds
    for (let round = rounds; round > 0; round--) {
      const isLastExercise = round === 2
      updateScreen(round)
      await workTime()
      if (round !== 1) await restTime({ isLastExercise })
    }

    // End of routine
    routineCompleted()
  }

  const prepTime = async () => {
    const { prepDuration, workouts, nextExercise } = getSettings()
    const exercise = workouts[nextExercise]
    switchBodyClass(`prep`)
    updateTextContent('#title', exercise)
    textToSpeech(`${t('First Exercise')}: ${exercise}`)

    for (let sec = prepDuration; sec > 0; sec--) {
      await displayElapsedTime(sec, prepDuration)
      await delaySeconds(1)
    }
  }

  const workTime = async () => {
    const { workouts, nextExercise, workDuration } = getSettings()
    const exercise = workouts[nextExercise] ?? nextExercise + 1
    switchBodyClass(`workout`)
    updateTextContent('#title', exercise)
    textToSpeech(t('Go!'))
    for (let sec = workDuration; sec > 0; sec--) {
      await displayElapsedTime(sec, workDuration)
      await delaySeconds(1)
    }
    forwardToNextExercise()
  }

  const restTime = async ({ isLastExercise }: { isLastExercise: boolean }) => {
    const { workouts, nextExercise, restDuration } = getSettings()
    const exercise = workouts[nextExercise]
    const subText = isLastExercise ? t('Last') : t('Next')
    switchBodyClass(`rest`)
    updateTextContent('#title', exercise)
    textToSpeech(`${subText}, ${exercise}`)
    for (let sec = restDuration; sec > 0; sec--) {
      await displayElapsedTime(sec, restDuration)
      await delaySeconds(1)
    }
  }

  const routineCompleted = async () => {
    await play('end')
    await delaySeconds(1)
    textToSpeech(t('Routine completed!'))
    const modal = document.querySelector(
      '#go-modal'
    ) as HTMLDialogElement | null
    if (modal) {
      modal.showModal()
    }
  }

  const forwardToNextExercise = async () => {
    const { workouts, nextExercise } = getSettings()
    let nextIndex = nextExercise + 1
    if (nextIndex >= workouts.length) nextIndex = 0
    updateSettings({ ...getSettings(), nextExercise: nextIndex })
  }

  const displayElapsedTime = async (time: number, totalTime: number) => {
    const progressEl = document.getElementById(
      'progress'
    ) as HTMLProgressElement | null

    if (progressEl) progressEl.value = (time / totalTime) * 100
    if (time <= 3 && time >= 1) await play('beep')
  }
</script>

<style>
  #title {
    font-size: 7.5vw;
    font-weight: bold;
    line-height: 1;
  }

  #info {
    font-size: 2.2em;
    display: flex;
    justify-content: space-around;

    & div {
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 0.3em;
    }
  }

  dialog footer {
    & button + button {
      margin-left: 1em;
    }
  }

  /* Screens less than 300px */
  @media (width <= 450px) {
    #title {
      font-size: 3em;
    }
  }
</style>
