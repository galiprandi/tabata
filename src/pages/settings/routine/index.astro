---
import Layout from '../../../layouts/layout.astro'

import ExerciseWork from '../../../components/ExerciseWork.astro'
import AddItemIcon from '../../../components/AddItemIcon.astro'
import RemoveItemIcon from '../../../components/RemoveItemIcon.astro'
import TrashIcon from '../../../components/TrashIcon.astro'
import RestoreIcon from '../../../components/RestoreIcon.astro'
---

<Layout>
  <header>
    <h1>Routine</h1>
  </header>

  <section>
    <ExerciseWork /><span id="total"></span>
  </section>

  <section id="workouts"></section>

  <footer>
    <div class="buttons">
      <button id="add" class="outline work"><AddItemIcon /></button>
      <button id="remove-last" class="outline"><RemoveItemIcon /></button>
      <button id="restore-list" class="outline"><RestoreIcon /></button>
      <button id="remove-all" class="outline"><TrashIcon /></button>
    </div>
  </footer>
  <br />
  <a href="/tabata/settings">Back</a>
</Layout>

<script>
  import { getSettings, updateSettings, updateText } from '../../../assets/main'
  import { defaultSettings } from '../../../assets/defaultSettings'

  const { workouts, ...rest } = getSettings()
  const totalWorkouts = workouts.length

  updateText('#total', `${totalWorkouts}`)

  const workoutList = document.getElementById('workouts')
  if (!workoutList) throw new Error('workoutList not found')

  workouts.forEach(workout => {
    const item = document.createElement('div')
    item.classList.add('item')
    item.innerHTML = `${workout}`
    workoutList?.appendChild(item)
  })

  const updateList = (workouts: string[]) => {
    updateSettings({ ...rest, workouts })
    updateText('#total', `${workouts.length}`)
    console.log(workouts)
    // Clear the list
    workoutList.innerHTML = ''
    // Populate the list
    workouts.forEach(workout => {
      const item = document.createElement('div')
      item.classList.add('item')
      item.innerHTML = `${workout}`
      workoutList?.appendChild(item)
    })
  }

  const addItem = () => {
    const text = prompt('Enter a new workout')
    if (!text) return
    const { workouts } = getSettings()
    workouts.push(text)
    updateSettings({ ...rest, workouts })
    updateList(workouts)
  }

  const removeLastItem = () => {
    const { workouts } = getSettings()
    const lastWorkout = workouts[workouts.length - 1]
    if (!confirm(`Are you sure you want to remove '${lastWorkout}'?`)) return
    workouts.pop()
    updateSettings({ ...rest, workouts })
    updateList(workouts)
  }

  const removeAllItems = () => {
    if (!confirm('Are you sure you want to remove all workouts?')) return

    const workouts: string[] = []
    updateSettings({ ...rest, workouts })
    updateList([])
  }

  const restoreAllItems = () => {
    if (!confirm('Are you sure you want to restore the default workouts?'))
      return
    const workouts = defaultSettings.workouts
    const settings = getSettings()
    updateSettings({ ...settings, workouts })
    updateList(workouts)
  }

  document.addEventListener('DOMContentLoaded', () => {
    const addEl = document.getElementById('add')
    const removeLastEl = document.getElementById('remove-last')
    const removeAllEl = document.getElementById('remove-all')
    const restoreEl = document.getElementById('restore-list')
    addEl?.addEventListener('click', addItem)
    removeLastEl?.addEventListener('click', removeLastItem)
    removeAllEl?.addEventListener('click', removeAllItems)
    restoreEl?.addEventListener('click', restoreAllItems)
  })
</script>

<style>
  section {
    font-size: 1.5em;
    margin-bottom: 1.5em;
  }

  #workouts .item {
    display: flex;
    justify-content: space-between;
    max-width: 80%;
    margin: auto;
    padding: 0.5em;
    border-top: 1px solid;
    border-bottom: 1px solid;
  }

  .buttons {
    display: flex;
    justify-content: center;
    gap: 2em;
  }

  button,
  button.secondary {
    min-width: unset !important;
    color: white;
  }

  #add,
  #restore-list {
    border-color: var(--color-work);
    background-color: var(--color-work);
  }

  #remove-last,
  #remove-all {
    border-color: var(--color-rest);
    background-color: var(--color-rest);
  }
</style>
