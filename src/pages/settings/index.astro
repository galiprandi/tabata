---
import EditItemIcon from '../../components/EditItemIcon.astro'
import UpIcon from '../../components/UpIcon.astro'
import DownIcon from '../../components/DownIcon.astro'
import Layout from '../../layouts/layout.astro'
import TrashIcon from '../../components/TrashIcon.astro'
import BackToHome from '../../components/BackToHome.astro'
import SettingsTimerConfig from '../../components/SettingsTimerConfig.astro'
---

<Layout>
  <div class="layout">
    <section>
      <SettingsTimerConfig vertical={true} />
    </section>
    <section class="routine">
      <h2>Routine</h2>
      <div id="workouts">
        <span aria-busy="true">Loading...</span>
      </div>
    </section>
  </div>

  <footer>
    <button id="add-new-item" class="">Add New Workout</button>
    <BackToHome />
  </footer>

  <dialog id="edit-item-modal">
    <article>
      <header>
        <h3 id="edit-item-title"></h3>
      </header>
      <main>
        <input type="text" name="item" id="edit-item-input" />
      </main>
      <footer class="grid">
        <button class="secondary">Cancel</button>
        <button>Save</button>
      </footer>
    </article>
  </dialog>
</Layout>

<template id="workout-item">
  <div class="item">
    <div id="order"></div>
    <div id="name"></div>
    <div class="buttons">
      <button class="up">
        <UpIcon />
      </button>
      <button class="down">
        <DownIcon />
      </button>
      <button class="edit">
        <EditItemIcon />
      </button>
      <button class="delete">
        <TrashIcon />
      </button>
    </div>
  </div>
</template>

<script>
  import { getSettings, updateSettings } from '../../assets/main'

  const editItemModal = document.getElementById(
    'edit-item-modal'
  ) as HTMLDialogElement
  const editItemTitle = document.getElementById(
    'edit-item-title'
  ) as HTMLHeadingElement
  const editItemInput = document.getElementById(
    'edit-item-input'
  ) as HTMLInputElement
  const saveEditItemButton = editItemModal.querySelector(
    'button:not(.secondary)'
  ) as HTMLButtonElement
  const cancelEditItemButton = editItemModal.querySelector(
    'button.secondary'
  ) as HTMLButtonElement
  const addNewItemButton = document.getElementById(
    'add-new-item'
  ) as HTMLButtonElement

  const populateScreen = () => {
    const { workouts } = getSettings()
    const template = document.getElementById(
      'workout-item'
    ) as HTMLTemplateElement
    const list = document.getElementById('workouts')

    if (list) {
      list.innerHTML = ''
    }

    workouts.forEach((workout, index) => {
      const clone = template.content.cloneNode(true)
      //@ts-expect-error
      const item = clone.querySelector('.item')
      item.querySelector('.up').dataset.idx = index
      item.querySelector('.down').dataset.idx = index
      item.querySelector('.edit').dataset.idx = index
      item.querySelector('.delete').dataset.idx = index
      item.querySelector('#order').textContent = index + 1
      item.querySelector('#name').textContent = workout
      list?.appendChild(clone)
    })

    document.querySelectorAll('.delete').forEach(button => {
      button.addEventListener('click', ({ currentTarget }) => {
        //@ts-expect-error
        const idx = parseInt(currentTarget.dataset.idx)
        if (idx > -1) deleteWorkout(idx)
      })
    })

    document.querySelectorAll('.edit').forEach(button => {
      button.addEventListener('click', ({ currentTarget }) => {
        //@ts-expect-error
        const idx = parseInt(currentTarget.dataset.idx)
        if (idx > -1) editWorkout(idx)
      })
    })

    document.querySelectorAll('.up').forEach(button => {
      button.addEventListener('click', ({ currentTarget }) => {
        //@ts-expect-error
        const idx = parseInt(currentTarget.dataset.idx)
        if (idx > -1) moveUp(idx)
      })
    })

    document.querySelectorAll('.down').forEach(button => {
      button.addEventListener('click', ({ currentTarget }) => {
        //@ts-expect-error
        const idx = parseInt(currentTarget.dataset.idx)
        if (idx > -1) moveDown(idx)
      })
    })

    addNewItemButton.addEventListener('click', addNewWorkout)
  }

  const deleteWorkout = (index: number) => {
    const { workouts } = getSettings()
    const items = workouts.splice(index, 1)
    if (!confirm(`Are you sure you want to delete ${items[0]}?`)) return
    updateSettings({ ...getSettings(), workouts })
    populateScreen()
  }

  const addNewWorkout = () => {
    const { workouts } = getSettings()
    editItemTitle.textContent = 'Add Workout'
    editItemInput.value = ''
    editItemInput.focus()
    editItemModal.showModal()

    saveEditItemButton?.addEventListener('click', () => {
      workouts.push(editItemInput.value)
      updateSettings({ ...getSettings(), workouts })
      editItemModal.close()
      populateScreen()
    })

    cancelEditItemButton?.addEventListener('click', () => {
      editItemInput.value = ''
      editItemModal.close()
    })
  }

  const editWorkout = (index: number) => {
    const { workouts } = getSettings()
    const workout = workouts[index]

    editItemTitle.textContent = 'Update Workout'
    editItemInput.value = workout
    editItemInput.focus()
    editItemModal.showModal()

    saveEditItemButton?.addEventListener('click', () => {
      workouts[index] = editItemInput.value
      updateSettings({ ...getSettings(), workouts })
      editItemModal.close()
      populateScreen()
    })

    cancelEditItemButton?.addEventListener('click', () => {
      editItemInput.value = ''
      editItemModal.close()
    })
  }

  const moveUp = (index: number) => {
    const { workouts } = getSettings()
    if (index > 0) {
      const temp = workouts[index]
      workouts[index] = workouts[index - 1]
      workouts[index - 1] = temp
      updateSettings({ ...getSettings(), workouts })
      populateScreen()
    }
  }

  const moveDown = (index: number) => {
    const { workouts } = getSettings()
    if (index < workouts.length - 1) {
      const temp = workouts[index]
      workouts[index] = workouts[index + 1]
      workouts[index + 1] = temp
      updateSettings({ ...getSettings(), workouts })
      populateScreen()
    }
  }

  document.addEventListener('DOMContentLoaded', () => {
    populateScreen()
  })
</script>

<style>
  .layout {
    display: grid;
    grid-template-areas: 'settings routine';
    grid-template-columns: 9em 1fr;

    gap: 1.5em;
  }

  .item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    gap: 1em;

    & .buttons {
      display: flex;
      gap: 1.3em;
    }

    #name {
      flex-grow: 2;
      text-align: left;
    }

    button {
      color: white;
      border: 0;
      background: 0;
      padding: 0;
      min-width: unset !important;
      font-size: 1.5em;
    }

    .delete {
      color: red;
    }
  }

  footer {
    display: grid;
    place-content: center;
    gap: 1em;
  }

  #edit-item-modal {
    footer {
      display: block;

      .secondary {
        background: 0;
        border: 0;
      }
    }
  }

  @media (width <= 450px) {
    .layout {
      grid-template-columns: 1fr;
      grid-template-areas:
        'settings'
        'routine';
    }
  }
</style>
