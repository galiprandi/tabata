---
import Layout from '../../layouts/layout.astro'
import BackToHome from '../../components/button.home.astro'
import PrepareIcon from '../../components/PrepareIcon.astro'
import WorkoutIcon from '../../components/ExerciseWork.astro'
import TimerIcon from '../../components/TimerIcon.astro'
import ExerciseWork from '../../components/ExerciseWork.astro'
import ExerciseRestIcon from '../../components/ExerciseRestIcon.astro'
---

<Layout>
  <header>
    <h1>Settings</h1>
  </header>
  <section class="data">
    <div>
      <TimerIcon />
      <span class="total-time"></span>
    </div>
    <div>
      <WorkoutIcon />
      <span class="total-workouts"></span>
    </div>
  </section>
  <section class="options">
    <div id="prepDur">
      <label>
        <PrepareIcon />

        <input type="number" id="prepDuration" class="prep" min="0" />
      </label>
    </div>
    <div id="workDur">
      <label>
        <ExerciseWork />
        <input type="number" id="workDuration" class="workout" min="0" />
      </label>
    </div>
    <div id="restDur">
      <label>
        <ExerciseRestIcon />
        <input type="number" id="restDuration" class="rest" min="0" />
      </label>
    </div>
  </section>

  <footer>
    <div class="columns">
      <a href="/tabata/settings/routine" class="button secondary"
        >Update Routine</a
      >
      <BackToHome />
    </div>
  </footer>
  <style>
    h1 {
      margin: 0;
    }
    section {
      font-size: 1.5em;
    }

    #clear {
      border-color: var(--color-work);
      background-color: var(--color-work);
    }

    .options {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      align-items: center;
      gap: 2em;
    }

    .data {
      font-size: 2em;
      display: flex;
      gap: 1.5em;
      justify-content: center;
      align-items: center;
    }

    .data > div {
      display: flex;
      align-items: center;
      gap: 0.3em;
    }
    label {
      position: relative;
      margin: 0;

      & svg {
        position: absolute;
        top: 50%;
        transform: translate(10px, -50%);
      }

      & input {
        width: 7em;
        text-align: center;
        margin: 0;
        padding-left: 3em;
      }
    }
  </style>

  <script>
    import { getSettings, updateSettings } from '../../assets/main'

    function Init() {
      const prepDurationEl = document.getElementById(
        'prepDuration'
      ) as HTMLInputElement
      const workoutDurationEl = document.getElementById(
        'workDuration'
      ) as HTMLInputElement
      const restDurationEl = document.getElementById(
        'restDuration'
      ) as HTMLInputElement

      const totalWorkoutsEl = document.querySelector('.total-workouts')
      const totalTimeEl = document.querySelector('.total-time')
      const { workouts, prepDuration, workDuration, restDuration } =
        getSettings()

      const totalWorkouts = workouts.length
      const routineMinutes = (
        (totalWorkouts * (workDuration + restDuration)) /
        60
      ).toFixed(1)

      // Set the preparation duration
      if (prepDurationEl) prepDurationEl.value = prepDuration.toString()

      // Set the workout duration
      if (workoutDurationEl) workoutDurationEl.value = workDuration.toString()

      // Set the rest duration
      if (restDurationEl) restDurationEl.value = restDuration.toString()

      // Set the total workouts
      if (totalWorkoutsEl)
        totalWorkoutsEl.textContent = totalWorkouts.toString()

      // Set the total time
      if (totalTimeEl) totalTimeEl.textContent = `${routineMinutes}m`

      // Save the settings
      prepDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), prepDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (workDuration + restDuration)) /
            60
          ).toFixed(1)}m`
      })

      workoutDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), workDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (value + restDuration)) /
            60
          ).toFixed(1)}m`
      })

      restDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), restDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (workDuration + value)) /
            60
          ).toFixed(1)}m`
      })
    }

    document.addEventListener('DOMContentLoaded', Init)
  </script>
</Layout>
