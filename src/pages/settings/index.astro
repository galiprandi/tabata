---
import Layout from '../../layouts/layout.astro'
import BackToHome from '../../components/button.home.astro'
import PrepareIcon from '../../components/PrepareIcon.astro'
import WorkoutIcon from '../../components/ExerciseWork.astro'
import TimerIcon from '../../components/TimerIcon.astro'
import ExerciseWork from '../../components/ExerciseWork.astro'
import ExerciseRestIcon from '../../components/ExerciseRestIcon.astro'
---

<Layout>
  <header>
    <h1>Settings</h1>
  </header>
  <section class="data">
    <div>
      <TimerIcon />
      <span class="total-time"></span>
    </div>
    <div>
      <WorkoutIcon />
      <span class="total-workouts"></span>
    </div>
  </section>
  <section class="options">
    <div id="prepDur">
      <label>
        <PrepareIcon />

        <input type="number" id="prepDuration" class="prep" />
      </label>
    </div>
    <div id="workDur">
      <label>
        <ExerciseWork />
        <input type="number" id="workDuration" class="workout" />
      </label>
    </div>
    <div id="restDur">
      <label>
        <ExerciseRestIcon />
        <input type="number" id="restDuration" class="rest" />
      </label>
    </div>
  </section>
  <section id="workout-list"></section>

  <footer>
    <div class="columns">
      <button id="restore" class="secondary">Restore</button>
      <button id="clear">Clear All</button>
      <BackToHome />
    </div>
  </footer>
  <style>
    section {
      font-size: 1.5em;
      margin-bottom: 1.5em;
    }

    #clear {
      border-color: var(--color-work);
      background-color: var(--color-work);
    }

    .options {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 2em;
    }

    [role='group'] {
      margin: 1em 0;

      & button {
        min-width: unset !important;
      }
    }

    .data {
      font-size: 2.5vw;
      display: flex;
      gap: 1.5em;
      justify-content: center;
      align-items: center;
    }

    .data > div {
      display: flex;
      align-items: center;
      gap: 1em;
    }

    input {
      width: 8ch;
      text-align: center;
      margin: 0;
    }
  </style>

  <script>
    import { getSettings, updateSettings } from '../../assets/main'
    import { defaultSettings } from '../../assets/defaultSettings'

    function Init() {
      const prepDurationEl = document.getElementById(
        'prepDuration'
      ) as HTMLInputElement
      const workoutDurationEl = document.getElementById(
        'workDuration'
      ) as HTMLInputElement
      const restDurationEl = document.getElementById(
        'restDuration'
      ) as HTMLInputElement
      const totalWorkoutsEl = document.querySelector('.total-workouts')
      const totalTimeEl = document.querySelector('.total-time')
      const { workouts, prepDuration, workDuration, restDuration } =
        getSettings()
      const workoutList = document.getElementById('workout-list')
      const totalWorkouts = workouts.length
      const routineMinutes = (
        (totalWorkouts * (workDuration + restDuration)) /
        60
      ).toFixed(1)

      // Set the preparation duration
      if (prepDurationEl) prepDurationEl.value = prepDuration.toString()

      // Set the workout duration
      if (workoutDurationEl) workoutDurationEl.value = workDuration.toString()

      // Set the rest duration
      if (restDurationEl) restDurationEl.value = restDuration.toString()

      // Set the total workouts
      if (totalWorkoutsEl)
        totalWorkoutsEl.textContent = totalWorkouts.toString()

      // Set the total time
      if (totalTimeEl) totalTimeEl.textContent = `${routineMinutes}m`

      // Save the settings
      prepDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), prepDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (workDuration + restDuration)) /
            60
          ).toFixed(1)}m`
      })

      workoutDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), workDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (value + restDuration)) /
            60
          ).toFixed(1)}m`
      })

      restDurationEl?.addEventListener('change', e => {
        const value = parseInt((e.target as HTMLInputElement).value)
        updateSettings({ ...getSettings(), restDuration: +value })
        if (totalTimeEl)
          totalTimeEl.textContent = `${(
            (totalWorkouts * (workDuration + value)) /
            60
          ).toFixed(1)}m`
      })

      if (!workoutList) return

      // Set the total workouts
      workouts.forEach(workout => {
        const item = document.createElement('div')
        item.innerText = workout
        workoutList.appendChild(item)
      })
    }

    // Delete all workouts
    function deleteAllWorkouts() {
      if (!confirm('Are you sure you want to delete all workouts?')) return
      const settings = getSettings()
      updateSettings({ ...settings, workouts: [] })
      location.reload()
    }

    function updateWorkout(workout: string) {
      const index = defaultSettings.workouts.findIndex(w => w === workout)
      console.log({ index })
    }

    // Save the default settings to the local storage
    function restoreDefaultSettings() {
      if (!confirm('Are you sure you want to restore the default settings?'))
        return
      localStorage.setItem('settings', JSON.stringify(defaultSettings))
      location.reload()
    }

    // Add event listener to all li elements
    document.querySelectorAll('li').forEach(li => {
      li.addEventListener('click', e => {
        const workout = (e.target as HTMLElement).innerText
        updateWorkout(workout)
      })
    })

    document
      .getElementById('restore')
      ?.addEventListener('click', restoreDefaultSettings)

    document
      .getElementById('clear')
      ?.addEventListener('click', deleteAllWorkouts)

    document.addEventListener('DOMContentLoaded', Init)
  </script>
</Layout>
