---
import ExerciseRestIcon from '@components/ExerciseRestIcon.astro'
import PrepareIcon from '@components/PrepareIcon.astro'
import TimerIcon from '@components/TimerIcon.astro'
import ExerciseWork from '@components/ExerciseWork.astro'
import RoundsIcon from '@components/RoundsIcon.astro'
import Helper from '@components/Helper.astro'

const { vertical = false } = Astro.props
const className = vertical ? 'vertical' : 'horizontal'
---

<section id="settings-timers">
  <header>
    <div>
      <TimerIcon />
      <span class="total-routine-time"></span>'
    </div>
    <div>
      <RoundsIcon />
      <span class="total-routine-exercises"></span>
    </div>
  </header>
  <div class={className}>
    <div id="prepContainer">
      <label>
        <PrepareIcon />
        <input type="number" id="prepDuration" class="prep" min="0" />
      </label>
      <Helper
        title="Preparation Time"
        description="Preparation time prior to the start of the round."
      />
    </div>
    <div id="workContainer">
      <label>
        <ExerciseWork />
        <input type="number" id="workDuration" class="workout" min="0" />
      </label>
      <Helper
        title="Working Time"
        description="Working time for each exercise."
      />
    </div>
    <div id="restContainer">
      <label>
        <ExerciseRestIcon />
        <input type="number" id="restDuration" class="rest" min="0" />
      </label>
      <Helper title="Rest Time" description="Rest time for each exercise." />
    </div>
    <div id="roundsContainer">
      <label>
        <RoundsIcon />
        <input type="number" id="rounds" class="rest" min="0" step="1" />
      </label>
      <Helper
        title="Exercise in Round"
        description="The total number of exercises per round, which defines the total work time of the round."
      />
    </div>
  </div>
</section>

<script>
  import { getSettings, updateSettings } from '../assets/main'
  import { updateTotalWorkouts, updateRoutineStats } from '../assets/settings'
  const { prepDuration, workDuration, restDuration, rounds } = getSettings()

  function Init() {
    const prepDurationInput = document.getElementById(
      'prepDuration'
    ) as HTMLInputElement | null
    const workoutDurationInput = document.getElementById(
      'workDuration'
    ) as HTMLInputElement | null
    const restDurationInput = document.getElementById(
      'restDuration'
    ) as HTMLInputElement | null
    const roundsInput = document.getElementById(
      'rounds'
    ) as HTMLInputElement | null

    // Set the values
    updateRoutineStats()
    updateTotalWorkouts()
    if (prepDurationInput) prepDurationInput.value = prepDuration.toString()
    if (workoutDurationInput)
      workoutDurationInput.value = workDuration.toString()
    if (restDurationInput) restDurationInput.value = restDuration.toString()
    if (roundsInput) roundsInput.value = `${rounds}`

    // Save the settings
    prepDurationInput?.addEventListener('change', e => {
      const value = parseInt((e.target as HTMLInputElement).value)
      updateSettings({ ...getSettings(), prepDuration: +value })
    })

    workoutDurationInput?.addEventListener('change', e => {
      const value = parseInt((e.target as HTMLInputElement).value)
      updateSettings({ ...getSettings(), workDuration: +value })
      updateRoutineStats()
    })

    restDurationInput?.addEventListener('change', e => {
      const value = parseInt((e.target as HTMLInputElement).value)
      updateSettings({ ...getSettings(), restDuration: +value })
      updateRoutineStats()
    })

    roundsInput?.addEventListener('change', e => {
      const value = parseInt((e.target as HTMLInputElement).value)
      updateSettings({ ...getSettings(), rounds: +value })
      updateRoutineStats()
    })
  }

  document.addEventListener('DOMContentLoaded', Init)
</script>

<style>
  #settings-timers {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    gap: 1em;

    &.vertical {
      flex-direction: column;
    }

    & header {
      display: flex;
      justify-content: space-evenly;
      align-items: center;
      flex-grow: 2;
      font-size: 1.6em;

      & > div {
        & svg {
          font-size: 60%;
          opacity: 0.6;
        }
      }
    }

    & .vertical,
    & .horizontal {
      display: flex;
      flex-direction: column;
      flex-wrap: wrap;
      gap: 1em;
    }

    & label {
      position: relative;
      margin: 0;

      & svg {
        position: absolute;
        top: 50%;
        transform: translate(10px, -50%);
      }

      & input {
        margin: 0;
        text-align: center;
        padding-left: 2.5em;
      }
    }
  }

  #prepContainer,
  #workContainer,
  #restContainer,
  #roundsContainer {
    display: flex;
    gap: 0.5em;
  }

  #rounds {
    background-color: var(--pico-primary-background);
  }

  @media (width > 450px) {
    #settings-timers {
      position: sticky;
      top: 1em;
    }
  }
</style>
