---
import BackToHome from './BackToHome.astro'
import DownIcon from './DownIcon.astro'
import EditItemIcon from './EditItemIcon.astro'
import TrashIcon from './TrashIcon.astro'
import UpIcon from './UpIcon.astro'
---

<section id="routine-list">
  <h2>Routine</h2>
  <section id="workouts-list">
    <span aria-busy="true">Loading...</span>
  </section>

  <section class="buttons">
    <button id="add-new-item" class="">Add New Workout</button>
    <br />
    <br />
    <BackToHome />
  </section>

  <dialog id="add-edit-modal">
    <article>
      <header>
        <h3 class="title"></h3>
      </header>

      <form>
        <fieldset role="group">
          <input
            type="text"
            name="item"
            id="edit-item-input"
            placeholder="Enter workout name"
            required
          />
          <button>Save</button>
        </fieldset>
      </form>

      <footer>
        <button class="secondary" id="add-edit-modal-cancel">Cancel</button>
      </footer>
    </article>

    <template id="workout-item-template">
      <div class="item">
        <div id="order"></div>
        <div id="name"></div>
        <div class="buttons">
          <button class="up">
            <UpIcon />
          </button>
          <button class="down">
            <DownIcon />
          </button>
          <button class="edit">
            <EditItemIcon />
          </button>
          <button class="delete">
            <TrashIcon />
          </button>
        </div>
      </div>
    </template>
  </dialog>

  <script>
    import {
      getSettings,
      updateSettings,
      updateTextContent,
    } from '../assets/main'

    const modalAddOrEdit = document.getElementById(
      'add-edit-modal'
    ) as HTMLDialogElement | null

    const modalAddOrEditCancelButton = document.querySelector(
      '#add-edit-modal-cancel'
    ) as HTMLButtonElement | null

    const addNewItemButton = document.getElementById(
      'add-new-item'
    ) as HTMLButtonElement | null

    const formAddEditItems = document.querySelector(
      '#add-edit-modal form'
    ) as HTMLFormElement | null

    const inputAddEditItems = document.querySelector(
      '#add-edit-modal form input'
    ) as HTMLInputElement | null

    formAddEditItems?.addEventListener('submit', e => {
      e.preventDefault()
      if (!modalAddOrEdit) throw new Error('Modal not found')
      const form = e.target as HTMLFormElement
      const idx = form.dataset.idx
      const name = form.item.value
      if (!name) return

      addEditWorkout(name, idx)
      modalAddOrEdit.close()
    })

    const updateRoutineList = () => {
      if (!formAddEditItems) throw new Error('Form not found')
      if (!inputAddEditItems) throw new Error('Input not found')
      if (!modalAddOrEdit) throw new Error('Modal not found')

      const { workouts } = getSettings()
      const workoutsList = document.getElementById('workouts-list')
      const template = document.getElementById(
        'workout-item-template'
      ) as HTMLTemplateElement
      if (!workoutsList || !template) return

      updateTextContent('#workouts-list', '')

      // Populate list
      workouts.forEach((workout, index) => {
        const isFirstItem = index === 0
        const isLastItem = index === workouts.length - 1

        const clone = template.content.cloneNode(true) as HTMLDivElement
        const item = clone.querySelector('.item') as HTMLDivElement
        const itemOrder = item.querySelector('#order') as HTMLDivElement
        const itemName = item.querySelector('#name') as HTMLDivElement
        itemOrder.textContent = `${index + 1}.`
        itemName.textContent = workout

        item.querySelectorAll('button').forEach(button => {
          const { className } = button
          if (className.includes('down') && isLastItem) button.disabled = true
          if (className.includes('up') && isFirstItem) button.disabled = true

          button.addEventListener('click', () => {
            if (className.includes('delete')) removeWorkout(index)
            if (className.includes('down')) moveWorkout(index, 'down')
            if (className.includes('up')) moveWorkout(index, 'up')
            if (className.includes('edit')) {
              formAddEditItems.dataset.idx = index.toString()
              inputAddEditItems.value = workout
              modalAddOrEdit.showModal()
            }
          })
        })

        workoutsList?.appendChild(clone)
      })
    }

    const init = () => {
      updateRoutineList()

      if (!addNewItemButton) throw new Error('Add new item button not found')
      if (!modalAddOrEditCancelButton)
        throw new Error('Cancel button not found')
      if (!inputAddEditItems) throw new Error('Input not found')
      if (!modalAddOrEdit) throw new Error('Modal not found')
      if (!formAddEditItems) throw new Error('Form not found')

      addNewItemButton.addEventListener('click', () => {
        if (!formAddEditItems) return
        formAddEditItems.dataset.idx = ''
        inputAddEditItems.value = ''
        modalAddOrEdit.showModal()
      })

      modalAddOrEditCancelButton.addEventListener('click', () => {
        formAddEditItems.dataset.idx = ''
        inputAddEditItems.value = ''
        modalAddOrEdit.close()
      })
    }

    const removeWorkout = (index: number) => {
      const { workouts } = getSettings()
      const items = workouts.splice(index, 1)
      if (!confirm(`Are you sure you want to remove "${items[0]}"?`)) return
      updateSettings({ ...getSettings(), workouts })
      init()
    }

    const moveWorkout = (fromIdx: number, direction: 'up' | 'down') => {
      const { workouts } = getSettings()
      const toIdx = direction === 'up' ? fromIdx - 1 : fromIdx + 1
      const orgWorkout = workouts[fromIdx]
      const desWorkout = workouts[toIdx]
      if (!orgWorkout || !desWorkout) return
      workouts[fromIdx] = desWorkout
      workouts[toIdx] = orgWorkout
      updateSettings({ ...getSettings(), workouts })
      updateRoutineList()
    }

    const addEditWorkout = (name: string, idx?: string) => {
      if (!modalAddOrEdit) throw new Error('Modal not found')
      if (!name.trim()) return
      let { workouts } = getSettings()
      if (!idx) workouts.push(name.trim())
      else workouts[parseInt(idx)] = name.trim()
      updateSettings({ ...getSettings(), workouts })
      updateRoutineList()
      modalAddOrEdit.close()
    }

    document.addEventListener('DOMContentLoaded', init)
  </script>

  <style>
    .item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1em;

      & .buttons {
        display: flex;
        gap: 1.3em;
      }

      #name {
        flex-grow: 2;
        text-align: left;
      }

      button {
        color: white;
        border: 0;
        background: 0;
        padding: 0;
        min-width: unset !important;
        font-size: 1.5em;
      }

      .delete {
        color: red;
      }
    }
  </style>
</section>
